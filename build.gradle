//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt

plugins {
  id 'checkstyle'
  id 'codenarc'
  id 'com.github.ksoichiro.console.reporter' version '0.6.2'
  id 'com.gradle.plugin-publish' version '0.10.0'
  id 'groovy'
  id 'jacoco'
}

repositories {
  jcenter()
  maven {
    url 'https://dl.bintray.com/gmullerb/all.shared.quality'
  }
  maven {
    url 'https://dl.bintray.com/gmullerb/all.shared.gradle'
  }
}

configurations {
  styleConfig
}

dependencies {
  compile gradleApi()
  styleConfig "all.shared.quality:base-style-config:$BASE_STYLE_CONFIG_VERSION"
  testImplementation 'all.shared.gradle:spy-project-factory:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:+'
}

final PLUGIN_SITE = 'https://github.com/gmullerb/file-lister/'

apply plugin: 'all.shared.gradle.file-lister'

final allFilesInTree = fileLister.obtainPartialFileTree()

// Plugin settings
//////////////////

checkstyle {
  toolVersion = CHECKSTYLE_VERSION
  config = resources.text.fromArchiveEntry(configurations.styleConfig, 'common/common-checks.xml')
}

codenarc {
  toolVersion = CODENARC_VERSION
  config = resources.text.fromArchiveEntry(configurations.styleConfig, 'groovy/groovy-rules.groovy')
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

pluginBundle {
  website = PLUGIN_SITE
  vcsUrl = PLUGIN_SITE
  description = 'Small set of utilities for listing files from a Gradle project'
  tags = ['file', 'directory', 'folder', 'filetree', 'listing files', 'ignore files', 'filetree',
    'filesystem', 'gradle project', 'gitignore', 'node_modules']

  plugins {
    thePlugin {
      id = project.hasProperty('PLUGIN_ID')
        ? property('PLUGIN_ID')
        : 'Set plugin id'
      displayName = 'File Lister plugin'
    }
  }
}

// TASKS
////////

task assessCommon (type: Checkstyle) {
  // Checkstyle task settings
  classpath = files('dummy') // Required by Checkstyle, Not required for Checker modules
  source = allFilesInTree
  // gradle task settings
  description = 'Run Common Checkstyle analysis for all files.'
  group = GROUP_ASSESS
}

task assessGradle(type: CodeNarc) {
  // CodeNarc task settings
  source = allFilesInTree.filter { it.name.matches('.*\\.gradle') }
  // gradle task settings
  description = 'Run Codenarc analysis for all gradle files.'
  group = GROUP_ASSESS
}

task assess {
  group = GROUP_ASSESS
  dependsOn = ['codenarcMain', 'codenarcTest']
}

// Task settings
////////////////

check {
  dependsOn += ['assess']
}

test {
  // Test task settings
  useJUnitPlatform()
  // gradle task settings
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification, reportCoverage
}

jacocoTestCoverageVerification {
  // jacocoTestCoverageVerification task settings
  doFirst {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/*_closure*')
    })
  }
  violationRules {
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'BRANCH'
        value = 'COVEREDRATIO'
        minimum = 0.85
      }
    }
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'INSTRUCTION'
        value = 'COVEREDRATIO'
        minimum = 0.65
      }
    }
  }
  // gradle task settings
  shouldRunAfter jacocoTestReport, reportCoverage
}

reportCoverage {
  dependsOn jacocoTestReport
}

// Default task
///////////////

defaultTasks 'assessCommon', 'assessGradle', 'assess', 'build'

tasks.withType(Test) {
  if(System.getProperty("HARNESS_JAVA_AGENT")) {
    jvmArgs += [System.getProperty("HARNESS_JAVA_AGENT")]
  }
}

gradle.projectsEvaluated {
        tasks.withType(Test) {
            filter {
                setFailOnNoMatchingTests(false)
            }
        }
}
